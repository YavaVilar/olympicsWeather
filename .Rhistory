# Logica para obtener los datos de la API
pronostic <- get_forecast(location)
# Llama a la función de visualización y pasa los datos del pronóstico
visualisation <- visualiser_pronostic(pronostic)
# Devuelve una lista con el pronóstico y la visualización
return(list(pronostic = pronostic, visualisation = visualisation))
}
get_forecast.default("Stade de France")
visualiser_pronostic <- function(pronostic) {
ggplot(pronostic, aes(x = as.POSIXct(data_heure))) +
geom_line(aes(y = temperature_celsius), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(y = temperature_ressentie_celsius), color = "red", linetype = "dashed", size = 1) +
geom_line(aes(y = precipitation_proba * 10), color = "green", linetype = "dotted", size = 1) +
geom_line(aes(y = precipitation * 10), color = "purple", linetype = "dotdash", size = 1) +
labs(title = "Pronóstico del tiempo",
x = "Fecha y Hora",
y = "Valores",
caption = "Fuente: Tu Fuente de Datos") +
scale_y_continuous(labels = function(x) sprintf("%g", x),
breaks = seq(0, max(pronostic$temperature_celsius, na.rm = TRUE), by = 2)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
scale_x_datetime(date_labels = "%Y-%m-%d %H:%M", date_breaks = "2 hours")
}
get_forecast.default("Stade de France")
pronostic$data_heure <- as.POSIXct(pronostic$data_heure)
get_forecast$data_heure <- as.POSIXct(get_forecast$data_heure)
visualiser_pronostic <- function(pronostic) {
library(ggplot2)
ggplot(pronostic, aes(x = as.POSIXct(data_heure))) +
geom_area(aes(y = temperature_celsius, fill = "Temperatura (°C)"), alpha = 0.7) +
geom_area(aes(y = temperature_ressentie_celsius, fill = "Sensación Térmica (°C)"), alpha = 0.7) +
geom_area(aes(y = precipitation_proba * 10, fill = "Prob. Precipitación (%)"), alpha = 0.7) +
geom_area(aes(y = precipitation * 10, fill = "Precipitación (mm)"), alpha = 0.7) +
labs(title = "Variables a lo largo del Tiempo",
x = "Fecha y Hora",
y = "Valores") +
scale_y_continuous(labels = function(x) sprintf("%g", x)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
get_forecast.default("Stade de France")
get_forecast.default <- function(location) {
# Logica para obtener los datos de la API
pronostic <- get_forecast(location)
# Llama a la función de visualización y pasa los datos del pronóstico
visualisation <- visualiser_pronostic(pronostic)
# Devuelve una lista con el pronóstico y la visualización
return(list(pronostic = pronostic, visualisation = visualisation))
}
get_forecast.default("Stade de France")
get_forecast.default("Stade de France")
library(httr2)
library(tibble)
library(tidygeocoder)
url <- "https://api.open-meteo.com/v1/forecast"
request(url) |>
req_url_query(latitude=48.85, longitude=2.35, hourly=c("temperature_2m", "apparent_temperature", "precipitation_probability", "precipitation"), .multi = "comma") |>
req_perform() |> #On exécute la demande
resp_body_json() |>
as_tibble() |>
View()
perform_request <- function(lat, long) {
url <- "https://api.open-meteo.com/v1/forecast"
response_table <-
request(url) |>
req_url_query(latitude=lat, longitude=long, hourly=c("temperature_2m", "apparent_temperature", "precipitation_probability", "precipitation"), .multi="comma") |>
req_perform () |>
resp_body_json() |>
tibble::as_tibble()
return(response_table)
}
##8
resp <- perform_request(48.85, 2.35)
str(resp$hourly[2][[1]], 1)
unlist(resp$hourly[2][[1]], 1)
unnest_data <- function(resp){
tibble(data_heure=unlist(resp$hourly[1][[1]]),
temperature_celsius=unlist(resp$hourly[2][[1]]),
temperature_ressentie_celsius=unlist(resp$hourly[3][[1]]),
precipitation_proba=unlist(resp$hourly[4][[1]]),
precipitation=unlist(resp$hourly[5][[1]]))
}
perform_request(48.85, 3.35) |>  unnest_data() -> y
plot(y$temperature_celsius)
##9
usethis::use_test("unnest_response")
data_test <- y[c(1:5),]
library(testthat)
##############question 10#################
# Función para convertir una dirección en coordenadas GPS
# Definir la función address_to_gps
address_to_gps <- function(location) {
# dataframe temporaire pour utilisation de geocode
df_temp <- data.frame(address = location, stringsAsFactors = FALSE)
# Appel à geocode avec le dataframe temporaire
result <- geocode(
.tbl = df_temp,
address = "address",
method = 'osm',
limit = 1
)
# Vérifie si des coordonnées ont été trouvées
if(nrow(result) > 0 && !is.na(result$lat[1]) && !is.na(result$long[1])) {
return(c(result$lat[1], result$long[1]))
} else {
# Retourne une erreur si aucune coordonnée n'a été trouvée
return("Aucune coordonnée GPS trouvée pour l'adresse fournie.")
}
}
address_to_gps("Paris")
get_forecast <- function(latitude, longitude){
}
get_gps_coordinate <- function(address) {
address_to_gps(address)
}
# Función interna para convertir una dirección en coordenadas GPS
address_to_gps <- function(location) {
# Dataframe temporal para usar con geocode
df_temp <- data.frame(address = location, stringsAsFactors = FALSE)
# Llamada a geocode con el dataframe temporal
result <- geocode(
.tbl = df_temp,
address = "address",
method = 'osm',
limit = 1
)
# Verificar si se encontraron coordenadas
if (nrow(result) > 0 && !is.na(result$lat[1]) && !is.na(result$long[1])) {
return(c(result$lat[1], result$long[1]))
} else {
# Lanzar un error si no se encontraron coordenadas
stop("No se encontraron coordenadas GPS para la dirección proporcionada.")
}
}
#######Fonction numérique
#' get_forecast.numeric
#'
#' @param coordinates
#'
#' @return un dataframe
#' @export
#'
#'
get_forecast.numeric <- function(coordinates) {
# Vérifier que l'entrée est un vecteur numérique de taille 2
if (!is.numeric(coordinates) || length(coordinates) != 2) {
stop("L'entrée doit être un vecteur numérique de taille 2.")
}
# Utiliser perform_request pour interroger une API météo avec les coordonnées
weather_data <- perform_request(coordinates[1], coordinates[2])
# Utiliser unnest_response pour structurer la réponse en un tibble lisible
result <- unnest_data(weather_data)
return(result)
}
##Fonction character
#' get_forecast.character
#'
#' @param address
#'
#' @return un dataframe
#' @export
#'
#'
get_forecast.character <- function(address) {
# Verificar que la entrada sea una cadena de caracteres de tamaño 1
if (!is.character(address) || length(address) != 1) {
stop("L'entrée doit être une chaîne de caractères de taille 1.")
}
# Convertir la dirección en coordenadas GPS utilizando get_gps_coordinate
coordinates <- get_gps_coordinate(address)
# Llamar a get_forecast.numeric con las coordenadas para obtener los pronósticos
return(get_forecast.numeric(coordinates))
}
#########Fonction générique
#' get_forecast
#'
#' @param location
#'
#' @return un dataframe
#' @export
#'
#' @examples get_forecast("Paris")
get_forecast <- function(location) {
UseMethod("get_forecast", location)
}
get_forecast.default("Stade de France")
visualiser_pronostic <- function(pronostic) {
library(ggplot2)
# Normalizar las variables dividiendo por 400
pronostic$precipitation_proba <- pronostic$precipitation_proba / 400
pronostic$precipitation <- pronostic$precipitation / 400
ggplot(pronostic, aes(x = as.POSIXct(data_heure))) +
geom_area(aes(y = temperature_celsius, fill = "Temperatura (°C)"), alpha = 0.7) +
geom_area(aes(y = temperature_ressentie_celsius, fill = "Sensación Térmica (°C)"), alpha = 0.7) +
geom_area(aes(y = precipitation_proba, fill = "Prob. Precipitación (%)"), alpha = 0.7) +
geom_area(aes(y = precipitation, fill = "Precipitación (mm)"), alpha = 0.7) +
labs(title = "Variables a lo largo del Tiempo",
x = "Fecha y Hora",
y = "Valores") +
scale_y_continuous(labels = function(x) sprintf("%g", x * 400)) +  # Ajustar las etiquetas en el eje y
scale_x_datetime(breaks = pronostic$data_heure, date_labels = "%Y-%m-%d %H:%M") +  # Mostrar todas las fechas en el eje x
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
get_forecast.default("Stade de France")
visualiser_pronostic <- function(pronostic) {
library(ggplot2)
# Normalizar las variables dividiendo por 400
pronostic$precipitation_proba <- pronostic$precipitation_proba / 400
pronostic$precipitation <- pronostic$precipitation / 400
ggplot(pronostic, aes(x = as.POSIXct(data_heure))) +
geom_area(aes(y = temperature_celsius, fill = "Temperatura (°C)"), alpha = 0.7) +
geom_area(aes(y = temperature_ressentie_celsius, fill = "Sensación Térmica (°C)"), alpha = 0.7) +
geom_area(aes(y = precipitation_proba, fill = "Prob. Precipitación (%)"), alpha = 0.7) +
geom_area(aes(y = precipitation, fill = "Precipitación (mm)"), alpha = 0.7) +
labs(title = "Variables a lo largo del Tiempo",
x = "Fecha y Hora",
y = "Valores") +
scale_y_continuous(labels = scales::number_format(scale = 400)) +  # Ajustar las etiquetas en el eje y
scale_x_datetime(breaks = pronostic$data_heure, date_labels = "%Y-%m-%d %H:%M") +  # Mostrar todas las fechas en el eje x
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
get_forecast.default("Stade de France")
visualiser_pronostic <- function(pronostic) {
library(ggplot2)
# Normalizar las variables dividiendo por 400
pronostic$precipitation_proba <- pronostic$precipitation_proba / 400
pronostic$precipitation <- pronostic$precipitation / 400
ggplot(pronostic, aes(x = as.POSIXct(data_heure))) +
geom_area(aes(y = temperature_celsius, fill = "Temperatura (°C)"), alpha = 0.7) +
geom_area(aes(y = temperature_ressentie_celsius, fill = "Sensación Térmica (°C)"), alpha = 0.7) +
geom_area(aes(y = precipitation_proba, fill = "Prob. Precipitación (%)"), alpha = 0.7) +
geom_area(aes(y = precipitation, fill = "Precipitación (mm)"), alpha = 0.7) +
labs(title = "Variables a lo largo del Tiempo",
x = "Fecha y Hora",
y = "Valores") +
scale_y_continuous(labels = function(x) x * 400) +  # Ajustar las etiquetas en el eje y
scale_x_datetime(breaks = pronostic$data_heure, date_labels = "%Y-%m-%d %H:%M") +  # Mostrar todas las fechas en el eje x
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
get_forecast.default("Stade de France")
pronostic$precipitation_proba <- pronostic$precipitation_proba / 400
visualiser_pronostic <- function(pronostic) {
pronostic$precipitation_proba <- pronostic$precipitation_proba / 400
pronostic$precipitation <- pronostic$precipitation / 400
ggplot(pronostic, aes(x = as.POSIXct(data_heure))) +
geom_area(aes(y = temperature_celsius, fill = "Temperatura (°C)"), alpha = 0.7) +
geom_area(aes(y = temperature_ressentie_celsius, fill = "Sensación Térmica (°C)"), alpha = 0.7) +
geom_area(aes(y = precipitation_proba, fill = "Prob. Precipitación (%)"), alpha = 0.7) +
geom_area(aes(y = precipitation, fill = "Precipitación (mm)"), alpha = 0.7) +
labs(title = "Variables a lo largo del Tiempo",
x = "Fecha y Hora",
y = "Valores") +
scale_y_continuous(labels = function(x) sprintf("%g", x * 400)) +  # Ajustar las etiquetas en el eje y
scale_x_datetime(breaks = pronostic$data_heure, date_labels = "%Y-%m-%d %H:%M") +  # Mostrar todas las fechas en el eje x
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
get_forecast.default("Stade de France")
visualiser_pronostic <- function(pronostic) {
library(ggplot2)
# Normalizar las variables dividiendo por 400
pronostic$precipitation_proba <- pronostic$precipitation_proba / 400
pronostic$precipitation <- pronostic$precipitation / 400
ggplot(pronostic, aes(x = as.POSIXct(data_heure))) +
geom_area(aes(y = temperature_celsius, fill = "Temperatura (°C)"), alpha = 0.7) +
geom_area(aes(y = temperature_ressentie_celsius, fill = "Sensación Térmica (°C)"), alpha = 0.7) +
geom_area(aes(y = precipitation_proba, fill = "Prob. Precipitación (%)"), alpha = 0.7) +
geom_area(aes(y = precipitation, fill = "Precipitación (mm)"), alpha = 0.7) +
labs(title = "Variables a lo largo del Tiempo",
x = "Fecha y Hora",
y = "Valores") +
scale_y_continuous(labels = scales::label_number(scale = 400)) +  # Ajustar las etiquetas en el eje y
scale_x_datetime(breaks = pronostic$data_heure, date_labels = "%Y-%m-%d %H:%M") +  # Mostrar todas las fechas en el eje x
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
get_forecast.default("Stade de France")
###Point bonus###
visualiser_pronostic <- function(pronostic) {
library(ggplot2)
# Normalizar las variables dividiendo por 400
pronostic$precipitation_proba <- pronostic$precipitation_proba / 400
pronostic$precipitation <- pronostic$precipitation / 400
ggplot(pronostic, aes(x = as.POSIXct(data_heure))) +
geom_area(aes(y = temperature_celsius, fill = "Temperatura (°C)"), alpha = 0.7) +
geom_area(aes(y = temperature_ressentie_celsius, fill = "Sensación Térmica (°C)"), alpha = 0.7) +
geom_area(aes(y = precipitation_proba, fill = "Prob. Precipitación (%)"), alpha = 0.7) +
geom_area(aes(y = precipitation, fill = "Precipitación (mm)"), alpha = 0.7) +
labs(title = "Variables a lo largo del Tiempo",
x = "Fecha y Hora",
y = "Valores") +
scale_y_continuous(trans = "reverse", breaks = scales::breaks_pretty(n = 10), labels = scales::label_number(scale = 400)) +
scale_x_datetime(breaks = pronostic$data_heure, date_labels = "%Y-%m-%d %H:%M") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
get_forecast.default("Stade de France")
visualiser_pronostic <- function(pronostic) {
library(ggplot2)
ggplot(pronostic, aes(x = as.POSIXct(data_heure), y = temperature_celsius)) +
geom_area(fill = "blue", alpha = 0.7) +
labs(title = "Temperatura a lo largo del Tiempo",
x = "Fecha y Hora",
y = "Temperatura (°C)") +
scale_x_datetime(breaks = pronostic$data_heure, date_labels = "%Y-%m-%d %H:%M") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
get_forecast.default("Stade de France")
visualiser_pronostic <- function(pronostic) {
library(ggplot2)
ggplot(pronostic, aes(x = as.POSIXct(data_heure))) +
geom_line(aes(y = temperature_celsius), color = "blue") +
labs(title = "Temperatura (°C)",
x = "Fecha y Hora",
y = "Temperatura (°C)") +
facet_grid(. ~ 1) +  # Un gráfico en la parte superior
geom_line(aes(y = temperature_ressentie_celsius), color = "red") +
labs(title = "Sensación Térmica (°C)",
x = "Fecha y Hora",
y = "Sensación Térmica (°C)") +
facet_grid(. ~ 2) +  # Otro gráfico en la parte superior
geom_line(aes(y = precipitation_proba), color = "green") +
labs(title = "Prob. Precipitación (%)",
x = "Fecha y Hora",
y = "Prob. Precipitación (%)") +
facet_grid(. ~ 3) +  # Un gráfico en la parte inferior
geom_line(aes(y = precipitation), color = "purple") +
labs(title = "Precipitación (mm)",
x = "Fecha y Hora",
y = "Precipitación (mm)") +
facet_grid(. ~ 4) +  # Otro gráfico en la parte inferior
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
get_forecast.default("Stade de France")
visualiser_pronostic <- function(pronostic) {
library(ggplot2)
ggplot(pronostic, aes(x = as.POSIXct(data_heure))) +
geom_line(aes(y = temperature_celsius), color = "blue") +
labs(title = "Temperatura (°C)", x = "Fecha y Hora", y = "Valores") +
scale_x_datetime(breaks = pronostic$data_heure, date_labels = "%Y-%m-%d %H:%M") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
facet_grid(. ~ 1, scales = "free_y", space = "free_y") +
geom_line(aes(y = temperature_ressentie_celsius), color = "red") +
labs(title = "Sensación Térmica (°C)", x = "Fecha y Hora", y = "Valores") +
geom_line(aes(y = precipitation_proba), color = "green") +
labs(title = "Prob. Precipitación (%)", x = "Fecha y Hora", y = "Valores") +
geom_line(aes(y = precipitation), color = "purple") +
labs(title = "Precipitación (mm)", x = "Fecha y Hora", y = "Valores")
}
get_forecast.default("Stade de France")
visualiser_pronostic <- function(pronostic){
library(ggplot2)
par(mfrow = c(1,1))
ggplot(pronostic, aes(x = as.POSIXct(data_heure))) +
geom_line(aes(y = temperature_celsius), color = "blue") +
labs(title = "Temperatura (°C)", x = "Fecha y Hora", y = "Valores") +
scale_x_datetime(breaks = "1 day", date_labels = "%Y-%m-%d %H:%M", limits = c(min(pronostic$data_heure), max(pronostic$data_heure))) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
get_forecast.default("Stade de France")
###Point bonus###
visualiser_pronostic <- function(pronostic){
library(ggplot2)
ggplot(pronostic, aes(x = as.POSIXct(data_heure))) +
geom_line(aes(y = temperature_celsius), color = "blue") +
labs(title = "Temperatura (°C)", x = "Fecha y Hora", y = "Valores") +
scale_x_datetime(breaks = "1 day", date_labels = "%Y-%m-%d %H:%M", limits = c(min(pronostic$data_heure), max(pronostic$data_heure))) +
coord_flip() +  # Invertir el eje y
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
get_forecast.default("Stade de France")
###Point bonus###
visualiser_pronostic <- function(pronostic){
library(ggplot2)
plot_ly(pronostic, x = ~data_heure, y = ~temperature_celsius, type = 'scatter', mode = 'lines') %>%
layout(title = "Temperatura a lo largo del tiempo",
xaxis = list(title = "Fecha y Hora"),
yaxis = list(title = "Temperatura (°C)"),
hovermode = "x unified")
}
visualiser_pronostic <- function(pronostic){
library(plotly)
plot_ly(pronostic, x = ~data_heure, y = ~temperature_celsius, type = 'scatter', mode = 'lines') %>%
layout(title = "Temperatura a lo largo del tiempo",
xaxis = list(title = "Fecha y Hora"),
yaxis = list(title = "Temperatura (°C)"),
hovermode = "x unified")
}
get_forecast.default("Stade de France")
install.packages("plotly")
visualiser_pronostic <- function(pronostic){
library(plotly)
plot_ly(pronostic, x = ~data_heure, y = ~temperature_celsius, type = 'scatter', mode = 'lines') %>%
layout(title = "Temperatura a lo largo del tiempo",
xaxis = list(title = "Fecha y Hora"),
yaxis = list(title = "Temperatura (°C)"),
hovermode = "x unified")
}
get_forecast.default("Stade de France")
###Point bonus###
visualiser_pronostic <- function(pronostic){
library(plotly)
par(mfrow=c(1,2))
plot_ly(pronostic, x = ~data_heure, y = ~temperature_celsius, type = 'scatter', mode = 'lines') %>%
layout(title = "Température",
xaxis = list(title = "Date et Heure"),
yaxis = list(title = "Température (°C)"),
hovermode = "x unified")
plot_ly(pronostic, x = ~data_heure, y = ~temperature_ressentie, type = 'scatter', mode = 'lines') %>%
layout(title = "Température ressentie",
xaxis = list(title = "Date et Heure"),
yaxis = list(title = "Température ressentie (°C)"),
hovermode = "x unified")
plot_ly(pronostic, x = ~data_heure, y = ~precipitation, type = 'scatter', mode = 'lines') %>%
layout(title = "Précipitation",
xaxis = list(title = "Date et Heure"),
yaxis = list(title = "Précipitation (mm)"),
hovermode = "x unified")
plot_ly(pronostic, x = ~data_heure, y = ~precipiation_proba, type = 'scatter', mode = 'lines') %>%
layout(title = "Probabilité de précipitation",
xaxis = list(title = "Date et Heure"),
yaxis = list(title = "Probabilité de précipitation (%)"),
hovermode = "x unified")
}
get_forecast.default("Stade de France")
###Point bonus###
visualiser_pronostic <- function(pronostic){
library(plotly)
par(mfrow=c(1,2))
plot_ly(pronostic, x = ~data_heure, y = ~temperature_celsius, type = 'scatter', mode = 'lines') %>%
layout(title = "Température",
xaxis = list(title = "Date et Heure"),
yaxis = list(title = "Température (°C)"),
hovermode = "x unified")
plot_ly(pronostic, x = ~data_heure, y = ~temperature_ressentie, type = 'scatter', mode = 'lines') %>%
layout(title = "Température ressentie",
xaxis = list(title = "Date et Heure"),
yaxis = list(title = "Température ressentie (°C)"),
hovermode = "x unified")
plot_ly(pronostic, x = ~data_heure, y = ~precipitation, type = 'scatter', mode = 'lines') %>%
layout(title = "Précipitation",
xaxis = list(title = "Date et Heure"),
yaxis = list(title = "Précipitation (mm)"),
hovermode = "x unified")
plot_ly(pronostic, x = ~data_heure, y = ~precipitation_proba, type = 'scatter', mode = 'lines') %>%
layout(title = "Probabilité de précipitation",
xaxis = list(title = "Date et Heure"),
yaxis = list(title = "Probabilité de précipitation (%)"),
hovermode = "x unified")
}
get_forecast.default("Stade de France")
View(visualiser_pronostic)
visualiser_pronostic <- function(pronostic){
library(plotly)
par(mfrow=c(1,2))
plot_ly(pronostic, x = ~data_heure, y = ~temperature_celsius, type = 'scatter', mode = 'lines') %>%
layout(title = "Température",
xaxis = list(title = "Date et Heure"),
yaxis = list(title = "Température (°C)"),
hovermode = "x unified")
plot_ly(pronostic, x = ~data_heure, y = ~temperature_ressentie, type = 'scatter', mode = 'lines') %>%
layout(title = "Température ressentie",
xaxis = list(title = "Date et Heure"),
yaxis = list(title = "Température ressentie (°C)"),
hovermode = "x unified")
plot_ly(pronostic, x = ~data_heure, y = ~precipitation, type = 'scatter', mode = 'lines') %>%
layout(title = "Précipitation",
xaxis = list(title = "Date et Heure"),
yaxis = list(title = "Précipitation (mm)"),
hovermode = "x unified")
plot_ly(pronostic, x = ~data_heure, y = ~precipitation_proba, type = 'scatter', mode = 'lines') %>%
layout(title = "Probabilité de précipitation",
xaxis = list(title = "Date et Heure"),
yaxis = list(title = "Probabilité de précipitation (%)"),
hovermode = "x unified")
}
get_forecast.default("Stade de France")
###Point bonus###
visualiser_pronostic <- function(pronostic){
library(plotly)
p1 <- plot_ly(pronostic, x = ~data_heure, y = ~temperature_celsius, type = 'scatter', mode = 'lines') %>%
layout(title = "Température",
xaxis = list(title = "Date et Heure"),
yaxis = list(title = "Température (°C)"),
hovermode = "x unified")
p2 <- plot_ly(pronostic, x = ~data_heure, y = ~temperature_ressentie, type = 'scatter', mode = 'lines') %>%
layout(title = "Température ressentie",
xaxis = list(title = "Date et Heure"),
yaxis = list(title = "Température ressentie (°C)"),
hovermode = "x unified")
p3 <- plot_ly(pronostic, x = ~data_heure, y = ~precipitation, type = 'scatter', mode = 'lines') %>%
layout(title = "Précipitation",
xaxis = list(title = "Date et Heure"),
yaxis = list(title = "Précipitation (mm)"),
hovermode = "x unified")
p4 <- plot_ly(pronostic, x = ~data_heure, y = ~precipitation_proba, type = 'scatter', mode = 'lines') %>%
layout(title = "Probabilité de précipitation",
xaxis = list(title = "Date et Heure"),
yaxis = list(title = "Probabilité de précipitation (%)"),
hovermode = "x unified")
subplot(p1, p2, p3, p4, nrows = 2, shareX = TRUE)
}
get_forecast.default("Stade de France")
